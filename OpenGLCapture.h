/* -LICENSE-START-
 ** Copyright (c) 2012 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#ifndef __OPENGL_COMPOSITE_H__
#define __OPENGL_COMPOSITE_H__

#include "DeviceInfo.h"
#include "DeckLinkAPI.h"
#include <QGLWidget>
#include <QMutex>
#include <QAtomicInt>
#include <map>
#include <vector>
#include <deque>
#include <string>

class CaptureDelegate;
class PinnedMemoryAllocator;

using namespace cam2vr;

#define DEFAULT_DEVICE 0
#define DEFAULT_MODE 11

class OpenGLCapture : public QGLWidget
{
	Q_OBJECT

public:
	OpenGLCapture(QWidget *parent = NULL);
	~OpenGLCapture();

    bool InitDeckLink(int device = DEFAULT_DEVICE, int mode = DEFAULT_MODE);
	bool Start();
	bool Stop();

    int getDeviceList(std::vector<std::string>& devices);
    int getModeList(int device, std::vector<std::string>& modes);

private:
	bool CheckOpenGLExtensions();

    IDeckLink* getDeckLink(int idx);
    IDeckLinkDisplayMode* getDeckLinkDisplayMode(IDeckLink* deckLink, int idx);

	// QGLWidget virtual methods
	virtual void initializeGL();
	virtual void paintGL();
	virtual void resizeGL(int width, int height);

    // VR
    void setTextureBounds();
    void computeMeshVertices(int width, int height);
    void computeMeshIndices(int width, int height);
    void drawFrame();

private slots:
	void VideoFrameArrived(IDeckLinkVideoInputFrame* inputFrame, bool hasNoInputSource);

private:
	QWidget*								mParent;
	CaptureDelegate*						mCaptureDelegate;
    QMutex									mMutex;				// protect access to both OpenGL and DeckLink calls

	// DeckLink
	IDeckLinkInput*							mDLInput;
    PinnedMemoryAllocator*					mCaptureAllocator;
    BMDTimeValue							mFrameDuration;
	BMDTimeScale							mFrameTimescale;
    unsigned								mFrameWidth;
	unsigned								mFrameHeight;
	bool									mHasNoInputSource;
    unsigned int                            mFrameCount;
    unsigned char*                          mRgbImageData;

	// OpenGL data
	bool									mPinnedMemoryExtensionAvailable;
	GLuint									mTexture;
	GLuint									mUnpinnedTextureBuffer;
	GLuint									mIdFrameBuf;
	GLuint									mIdColorBuf;
	GLuint									mIdDepthBuf;
	GLuint									mProgram;
    GLuint                                  mVertexShader;
	GLuint									mFragmentShader;
    int										mViewWidth;
	int										mViewHeight;

	bool InitOpenGLState();
	bool compileFragmentShader(int errorMessageSize, char* errorMessage);

    // VR
    int                                     m_meshWidth, m_meshHeight;
    float                                   m_bufferScale;
    float                                   m_viewportOffsetScale[8];
    DeviceInfo*                             m_deviceInfo;
    unsigned int                            m_vbo;
    unsigned int                            m_ibo;
    std::vector<float>                      m_vertices;
    std::vector<unsigned int>               m_indices;
};

////////////////////////////////////////////
// PinnedMemoryAllocator
////////////////////////////////////////////
class PinnedMemoryAllocator : public IDeckLinkMemoryAllocator
{
public:
	PinnedMemoryAllocator(QGLWidget* context, const char* name, unsigned cacheSize);
	virtual ~PinnedMemoryAllocator();

	GLuint bufferObjectForPinnedAddress(int bufferSize, const void* address);
	void unPinAddress(const void* address);

	// IUnknown methods
	virtual HRESULT STDMETHODCALLTYPE	QueryInterface(REFIID iid, LPVOID *ppv);
	virtual ULONG STDMETHODCALLTYPE		AddRef(void);
	virtual ULONG STDMETHODCALLTYPE		Release(void);

	// IDeckLinkMemoryAllocator methods
	virtual HRESULT STDMETHODCALLTYPE	AllocateBuffer (uint32_t bufferSize, void* *allocatedBuffer);
	virtual HRESULT STDMETHODCALLTYPE	ReleaseBuffer (void* buffer);
	virtual HRESULT STDMETHODCALLTYPE	Commit ();
	virtual HRESULT STDMETHODCALLTYPE	Decommit ();

private:
	QGLWidget*							mContext;
	QAtomicInt							mRefCount;
	std::map<const void*, GLuint>		mBufferHandleForPinnedAddress;
	std::vector<void*>					mFrameCache;
	const char*							mName;
	unsigned							mFrameCacheSize;
};

////////////////////////////////////////////
// Capture Delegate Class
////////////////////////////////////////////

class CaptureDelegate : public QObject, public IDeckLinkInputCallback
{
	Q_OBJECT

public:
	CaptureDelegate () { }

	// IUnknown needs only a dummy implementation
	virtual HRESULT	STDMETHODCALLTYPE	QueryInterface (REFIID /*iid*/, LPVOID* /*ppv*/)	{return E_NOINTERFACE;}
	virtual ULONG	STDMETHODCALLTYPE	AddRef ()											{return 1;}
	virtual ULONG	STDMETHODCALLTYPE	Release ()											{return 1;}

	virtual HRESULT STDMETHODCALLTYPE	VideoInputFrameArrived(IDeckLinkVideoInputFrame *videoFrame, IDeckLinkAudioInputPacket *audioPacket);
	virtual HRESULT	STDMETHODCALLTYPE	VideoInputFormatChanged(BMDVideoInputFormatChangedEvents notificationEvents, IDeckLinkDisplayMode *newDisplayMode, BMDDetectedVideoInputFormatFlags detectedSignalFlags);

signals:
	void captureFrameArrived(IDeckLinkVideoInputFrame *videoFrame, bool hasNoInputSource);
};


#endif	// __OPENGL_COMPOSITE_H__
