/* -LICENSE-START-
 ** Copyright (c) 2012 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 **
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 **
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#include "cam2vr.h"
#include "OpenGLCapture.h"

#include <QtWidgets>
#include <QDebug>
#include <QInputDialog>

Cam2VR::Cam2VR() : QMainWindow(), pOpenGLCapture(NULL), m_device(DEFAULT_DEVICE), m_mode(DEFAULT_MODE)
{
    createActions();
    createMenus();

    pOpenGLCapture = new OpenGLCapture(this);

    setCentralWidget(pOpenGLCapture);

    pOpenGLCapture->getDeviceList(m_deviceList);
    pOpenGLCapture->getModeList(m_device, m_modeList);
    updateTitle();

    if (!pOpenGLCapture->InitDeckLink(m_device, m_mode))
        exit(0);
    start();
}

Cam2VR::~Cam2VR()
{
    if (pOpenGLCapture)
	{
        pOpenGLCapture->Stop();
        delete pOpenGLCapture;
        pOpenGLCapture = NULL;
	}
}

void Cam2VR::start()
{
    if (!pOpenGLCapture->Start())
		exit(0);

    move(1920, 0);
    resize(1920, 1080);
    showFullScreen();
    menuBar()->hide();
}

void Cam2VR::createActions()
{
    captureSelectDeviceAct = new QAction(tr("Select &device"), this);
    captureSelectDeviceAct->setStatusTip(tr("Select device"));
    connect(captureSelectDeviceAct, &QAction::triggered, this, &Cam2VR::captureSelectDevice);

    captureSelectModeAct = new QAction(tr("Select &mode"), this);
    captureSelectModeAct->setStatusTip(tr("Select video mode"));
    connect(captureSelectModeAct, &QAction::triggered, this, &Cam2VR::captureSelectMode);

    captureStartAct = new QAction(tr("&Start"), this);
    captureStartAct->setStatusTip(tr("Start capture"));
    connect(captureStartAct, &QAction::triggered, this, &Cam2VR::captureStart);

    captureStopAct = new QAction(tr("S&top"), this);
    captureStopAct->setStatusTip(tr("Stop capture"));
    connect(captureStopAct, &QAction::triggered, this, &Cam2VR::captureStop);


    fullscreenAct0 = new QAction(tr("Fullscreen &0"), this);
    fullscreenAct0->setStatusTip(tr("Go fullscreen 0"));
    connect(fullscreenAct0, &QAction::triggered, this, &Cam2VR::goFullScreen0);

    fullscreenAct1 = new QAction(tr("Fullscreen &1"), this);
    fullscreenAct1->setStatusTip(tr("Go fullscreen 1"));
    connect(fullscreenAct1, &QAction::triggered, this, &Cam2VR::goFullScreen1);
}

void Cam2VR::createMenus()
{
    captureMenu = menuBar()->addMenu(tr("&Capture"));
    captureMenu->addAction(captureSelectDeviceAct);
    captureMenu->addAction(captureSelectModeAct);
    captureMenu->addSeparator();
    captureMenu->addAction(captureStartAct);
    captureMenu->addAction(captureStopAct);

    showMenu = menuBar()->addMenu(tr("&Show"));
    showMenu->addAction(fullscreenAct0);
    showMenu->addAction(fullscreenAct1);
}

void Cam2VR::updateTitle()
{
    QString title = "";

    if(m_deviceList.size() && m_device < m_deviceList.size()) {
        title = "Device: (" + QString::number(m_device) +") " + m_deviceList[m_device].c_str();
    }

    if(m_modeList.size() && m_mode < m_modeList.size()) {
        title += " | Mode: (" + QString::number(m_mode) + ") " + m_modeList[m_mode].c_str();
    }

    this->setWindowTitle(title);
}

void Cam2VR::captureStart()
{
    if (!pOpenGLCapture->InitDeckLink(m_device, m_mode))
        exit(0);
    start();
    goFullScreen0();
}

void Cam2VR::captureStop()
{
    pOpenGLCapture->Stop();
}

void Cam2VR::captureSelectDevice()
{
    pOpenGLCapture->getDeviceList(m_deviceList);
    QStringList items;
    for(int i=0; i < m_deviceList.size(); i++)
        items << tr(m_deviceList[i].c_str());

    bool ok;
    QString item = QInputDialog::getItem(this, tr("Select device"),
                                             tr("Device:"), items, m_device, false, &ok);
    int idx = 0;
    if (ok && !item.isEmpty()) {
        int prev_device = m_device;
        foreach(const QString &str, items) {
            if (str == item) {
                m_device = idx;
                break;
            }
            idx++;
        }
        if(prev_device != m_device) {
            updateTitle();
            if (!pOpenGLCapture->InitDeckLink(m_device, m_mode))
                exit(0);
            start();
        }
    }
}

void Cam2VR::captureSelectMode()
{
    pOpenGLCapture->getModeList(m_device, m_modeList);
    QStringList items;
    for(int i=0; i < m_modeList.size(); i++)
        items << tr(m_modeList[i].c_str());

    bool ok;
    QString item = QInputDialog::getItem(this, tr("Select device"),
                                             tr("Device:"), items, m_mode, false, &ok);
    int idx = 0;
    if (ok && !item.isEmpty()) {
        int prev_mode = m_mode;
        foreach(const QString &str, items) {
            if (str == item) {
                m_mode = idx;
                break;
            }
            idx++;
        }

        if(prev_mode != m_mode) {
            updateTitle();
            if (!pOpenGLCapture->InitDeckLink(m_device, m_mode))
                exit(0);
            start();
        }
    }
}

void Cam2VR::goFullScreen0()
{
    qDebug() << "go fullscreen 0";
    this->windowHandle()->setScreen(qApp->screens()[0]);
    showFullScreen();
}

void Cam2VR::goFullScreen1()
{
    qDebug() << "go fullscreen 1";
    this->windowHandle()->setScreen(qApp->screens()[1]);
    showFullScreen();
}

void Cam2VR::goFullScreen2()
{
    setGeometry(1920, 0, 1920, 1080);
    menuBar()->hide();
}

void Cam2VR::keyPressEvent(QKeyEvent *event)
{
    qDebug() << "key pressed" << event->key();
    switch (event->key())
    {
    case Qt::Key_S:
        start();
        break;

    case Qt::Key_Escape:
    case Qt::Key_N:
        showNormal();
        break;

    case Qt::Key_0:
        //this->windowHandle()->setScreen(qApp->screens()[0]);
        //showFullScreen();
        break;

    case Qt::Key_1:
        //this->windowHandle()->setScreen(qApp->screens()[1]);
        //showFullScreen();
        break;

    case Qt::Key_2:
        //this->windowHandle()->setScreen(qApp->screens()[0]);
        //goFullScreen2();
        move(1920, 0);
        resize(1920, 1080);
        showFullScreen();
        menuBar()->hide();
        break;
    }
}
